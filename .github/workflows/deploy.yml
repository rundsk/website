name: Deploy
on: push

jobs:
  dsk:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          repository: rundsk/dsk
          ref: 1.3
          path: dsk
      - uses: actions/setup-node@v1
      - uses: actions/setup-go@v1
        with:
          go-version: '1.13'
      - run: yarn install --production=true && yarn build
        working-directory: ../dsk/frontend
        env:
          # Don't convert warnings to errors, we love our warnings.
          CI: false
      - run: make dist/dsk-linux-amd64
        working-directory: ../dsk
        env:
          GO111MODULE: on
      - uses: actions/upload-artifact@v1
        with:
          name: dist-dsk
          path: ../dsk/dist

  example-design-system:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          repository: rundsk/example-design-system
          ref: master
      - uses: actions/upload-artifact@v1
        with:
          name: example-design-system
          path: ../example-design-system

  website:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/upload-artifact@v1
        with:
          name: website
          path: .

  assemble:
    runs-on: ubuntu-latest
    needs:
      - dsk
      - example-design-system
      - website
    steps:
      - uses: actions/checkout@v1
        with:
          repository: rundsk/dsk
          ref: 1.3
          path: dsk
      - uses: actions/download-artifact@v1
        with:
          name: dist-dsk
          path: dist-dsk
      - uses: actions/download-artifact@v1
        with:
          name: website
          path: website
      - uses: actions/download-artifact@v1
        with:
          name: example-design-system
          path: "website/Example Design System"
      - run: |
          echo 'webroot = "website"' >> Hoifile
          echo 'context = "prod"' >> Hoifile
          echo '  app { command = "dist-dsk/dsk-linux-amd64 -port {{ .P.App.Port }} website" }' >> Hoifile
          echo '  domain "rundsk.com" {' >> Hoifile
          echo '    www = "drop"' >> Hoifile
          echo '    SSL = { certificate = "!system" certificateKey = "!system" }' >> Hoifile
          echo '}' >> Hoifile
      - run: |
          sed -i 's/__FIGMA_ACCESS_TOKEN__/${{secrets.figma_token}}/' website/dsk.yaml
      - run: |
          cp ../dsk/CONTRIBUTING.md "website/80_Development/01_Contributing to DSK.md"
          cp ../dsk/CHANGELOG.md "website/80_Development/02_Changelog.md"
          mv website/README.md website/01_Home.md
      - uses: actions/upload-artifact@v1
        with:
          name: assemblage
          path: .

  deploy:
    runs-on: ubuntu-latest
    needs:
      - assemble
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: assemblage
          path: assemblage
      - uses: shimataro/ssh-key-action@v1
        with:
          public-key: ${{ secrets.deploy_public_key }}
          private-key: ${{ secrets.deploy_private_key }}
          known-hosts: ${{ secrets.deploy_known_hosts }}
      - run: chmod +x assemblage/dist-dsk/*
      - run: |
          ssh -o StrictHostKeyChecking=no deploy@${{ secrets.deploy_host }} 'sudo hoictl --project=/var/www/dsk_website unload'

          rsync --stats -h -z -r \
            --rsh "ssh -p 22 -o StrictHostKeyChecking=no" \
            --delete \
            --links \
            --times \
            --verbose \
            --itemize-changes \
            assemblage/ deploy@${{ secrets.deploy_host }}:/var/www/dsk_website

          ssh -o StrictHostKeyChecking=no deploy@${{ secrets.deploy_host }} 'sudo hoictl --project=/var/www/dsk_website load'